import React, { useState, useCallback, useRef } from 'react';
//import Cropper from 'react-easy-crop';
import Annotation from 'react-image-annotation';
import { RectangleSelector } from 'react-image-annotation/lib/selectors';
//import Cropper from "react-cropper";
import ReactCrop, {
    centerCrop,
    makeAspectCrop,
    Crop,
    PixelCrop} from 'react-image-crop'
//import Demo from './cropping';

import "cropperjs/dist/cropper.css";
import 'react-image-crop/dist/ReactCrop.css';
import "../src/components/cropping/cropping.css";
import './components/layout/layout.css';


const defaultSrc = `${process.env.PUBLIC_URL}/images/one.jpg`;
const Layout = () => {
//const [crop, setCrop] = useState({ x: 0, y: 0 })
const [zoom, setZoom] = useState(1)
const [cropSec, setCropSec] = useState(false)
const [annotationSec, setAnnotationSec] = useState(false)
const [magnifierSec, setMegnifierSec] = useState(false)
const [annotations, setAnnotations] = useState([])
const [annotation, setAnnotation] = useState({})
const [crop, setCrop] = useState();
const [completedCrop, setCompletedCrop] = useState({ width:0, height:0})
const previewCanvasRef = useRef(null)
const imgRef = useRef<HTMLImageElement>(null)
const hiddenAnchorRef = useRef<HTMLAnchorElement>(null)
const blobUrlRef = useRef('')
const cropperRef = useRef(null);
const onCrop = () => {
    const cropper = cropperRef.current?.cropper;
    console.log(cropper.getCroppedCanvas().toDataURL());
};

const onChange = (annotation)=> {
    setAnnotation(annotation)
}

const onSubmit = (annotation)=> {
    const { geometry, data } = annotation
    setAnnotations(annotations.concat({
        geometry,
        data: {
          ...data,
          id: Math.random()
        }
    }))
}

const onDownloadCropClick = ()=> {
    if (!previewCanvasRef.current) {
      throw new Error('Crop canvas does not exist')
    }

    previewCanvasRef.current.toBlob((blob) => {
      if (!blob) {
        throw new Error('Failed to create blob')
      }
      if (blobUrlRef.current) {
        URL.revokeObjectURL(blobUrlRef.current)
      }
      blobUrlRef.current = URL.createObjectURL(blob)
      hiddenAnchorRef.current.href = blobUrlRef.current
      hiddenAnchorRef.current.click()
    })
  }

const onChangeType = (arg)=> {
    console.log(arg);
    if(arg === 'crop') {
        setMegnifierSec(false);
        setAnnotationSec(false);
        setCropSec(true);
    } else if(arg === 'rect') {
        setCropSec(false);
        setMegnifierSec(false);
        setAnnotationSec(true);
    } else if(arg === 'magnifier') {
        setCropSec(false);
        setAnnotationSec(false);
        setMegnifierSec(true);
    } else if(arg === 'cls') {
        setCropSec(false);
        setMegnifierSec(false);
        setAnnotationSec(false);
    }
}
    return (
        <>
            <div className="polaroid">                
                <div className="menu">
                    <ul>
                        <li>
                            <img src={process.env.PUBLIC_URL + "/icons/magnifier_glass_icon.png"} alt="magnifierIcon" width={'20px'} onClick={() => onChangeType('magnifier')} />
                        </li>
                        <li>
                            <img src={process.env.PUBLIC_URL + "/icons/crop_icon.png"} alt='cropIcon' onClick={() => onChangeType('crop')} />
                            <ul>
                                <li><img src={process.env.PUBLIC_URL + "/icons/download_multimedia_file_icon.png"} alt="magnifierIcon" width={'20px'} onClick={() => onDownloadCropClick()} /></li>
                            </ul>
                        </li>
                        <li><img src={process.env.PUBLIC_URL + "/icons/design_graphic_rectangle_transform_icon.png"} alt='rectangleIcon' onClick={() => onChangeType('rect')}/></li>
                        <li><img src={process.env.PUBLIC_URL + "/icons/delete_garbage_icon.png"} alt='deleteIcon' onClick={() => onChangeType('delete')}/></li>
                        <li><button onClick={() => onChangeType('cls')}>close</button></li>
                    </ul>
                </div>
                <div className="main">
                {cropSec && 
                    <>
                        {/* <div className="crop-container">
                            <Cropper
                                style={{ height: 400, width: "100%" }}
                                ref={cropperRef}
                                zoomTo={0.5}
                                initialAspectRatio={1}
                                preview=".img-preview"
                                src={defaultSrc}
                                viewMode={1}
                                minCropBoxHeight={10}
                                minCropBoxWidth={10}
                                background={false}
                                responsive={true}
                                autoCropArea={1}
                                checkOrientation={false} // https://github.com/fengyuanchen/cropperjs/issues/671
                                guides={true}
                                />
                            <Cropper
                                image={defaultSrc}
                                crop={crop}
                                zoom={zoom}
                                aspect={4 / 3}
                                onCropChange={setCrop}
                                onCropComplete={onCropComplete}
                                onZoomChange={setZoom} />
                        </div>
                        <div className="controls">
                                <input
                                    type="range"
                                    value={zoom}
                                    min={1}
                                    max={3}
                                    step={0.1}
                                    aria-labelledby="Zoom"
                                    onChange={(e) => {
                                        setZoom(e.target.value);
                                    } }
                                    className="zoom-range" />
                                    <button onClick={() => onChangeType('cls')}>close</button>
                        </div> */}
                        <ReactCrop 
                            crop={crop} 
                            onChange={c => setCrop(c)}
                            onComplete={(c) => setCompletedCrop(c)}>
                            <img src={defaultSrc} style={{width: '1800px', height: '750px'}}/>
                        </ReactCrop>
                    </> 
                }
                {annotationSec && 
                    <>
                        <Annotation 
                            src={defaultSrc}
                            annotations={annotations}
                            value={annotation}
                            type={RectangleSelector.TYPE}
                            onChange={onChange}
                            onSubmit={onSubmit}
                        />
                    </>
                }
                {magnifierSec && 
                    <>
                    
                    </>
                }
                </div> 
                <div className="sidebar">
                </div>               
            </div>
            <canvas 
              ref={previewCanvasRef}
              style={{
                border: '2px solid red',
                objectFit: 'contain',
                width: completedCrop.width,
                height: completedCrop.height,
              }}
            />
        </>
    )
}

export default Layout;
